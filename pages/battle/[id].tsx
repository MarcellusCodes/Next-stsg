import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { motion, AnimatePresence } from "framer-motion";
import { GetStaticProps, GetStaticPaths } from "next";
import {
  Navbar,
  Header,
  Title,
  PrimaryButton,
  Heading,
  Text,
} from "../../src/components/index";
import { client } from "../../src/lib/index";
import { Easing } from "../../src/constants/index";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { getBattle, getBattles } from "../../src/queries/index";
import axios from "axios";
import { useMutation } from "@tanstack/react-query";
import { useRef, useState } from "react";

const Battle: NextPage = ({ battle }) => {
  const { data: session } = useSession();
  const selectRef = useRef();
  const [showModal, setShowModal] = useState(false);
  const [type, setType] = useState("");
  const [message, setMessage] = useState("");
  const voteMutation = useMutation(
    ({ battleId, hero }: { battleId: string; hero: string }) =>
      axios.post("/api/vote", {
        battleId: battleId,
        hero: hero,
      })
  );

  const showModalStatus = async (type: string, message: string) => {
    setShowModal(true);
    setType(type);
    setMessage(message);
  };
  return (
    <>
      <Head>
        <title>Battle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AnimatePresence exitBeforeEnter>
        {showModal && (
          <motion.div
            initial={{
              clipPath: "polygon(0 0, 100% 0, 100% 0, 0 0)",
              opacity: 0,
            }}
            animate={{
              clipPath: "polygon(0 0, 100% 0, 100% 100%, 0 100%)",
              opacity: 1,
            }}
            exit={{
              clipPath: "polygon(0 100%, 100% 100%, 100% 100%, 0 100%)",
              opacity: 0,
            }}
            transition={{ ...Easing, duration: 0.6 }}
            className="fixed top-0 left-0 w-full h-screen backdrop-brightness-50 z-50"
          >
            <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-md shadow-md  p-4 w-[90%] sm:w-4/12 flex flex-col items-center">
              <Heading
                title={type}
                color={`${
                  type === "❗ Error" ? "text-red-600" : "text-green-600"
                }`}
              />
              <div className="py-2" />
              <Text styles="text-center">{message}</Text>
              <div className="py-6" />
              <PrimaryButton
                onClick={() => {
                  setShowModal(false);
                }}
              >
                Close
              </PrimaryButton>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <Navbar>
        <Link href="/" passHref>
          <li className="bg-primary-500 hover:bg-primary-300 active:bg-primary-700 text-slate-50 px-6 py-2 text-xl font-primary rounded-md cursor-pointer">
            <a className="flex flex-row items-center space-x-1">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                className="w-[24px] h-[24px] fill-current text-slate-50"
              >
                <path d="M19 11H9l3.29-3.29a1 1 0 0 0 0-1.42 1 1 0 0 0-1.41 0l-4.29 4.3A2 2 0 0 0 6 12a2 2 0 0 0 .59 1.4l4.29 4.3a1 1 0 1 0 1.41-1.42L9 13h10a1 1 0 0 0 0-2Z" />
              </svg>
              <span>Battles</span>
            </a>
          </li>
        </Link>
      </Navbar>
      <Header>
        <h1>
          {battle.Battle.hero_one} VS {battle.Battle.hero_two}
        </h1>
        <ul className="flex flex-row items-center space-x-4">
          <li className="text-md md:text-lg font-secondary text-slate-50 opacity-80">
            {battle.allVote
              ? battle.allVote.filter(
                  (vote: { hero: string }) =>
                    vote.hero === battle.Battle.hero_one
                ).length
              : 0}
          </li>
          <li className="text-xl md:text-2xl font-primary bg-clip-text font-extrabold text-transparent bg-gradient-to-b from-orange-500 to-yellow-500">
            VS
          </li>
          <li className="text-md md:text-lg font-secondary text-slate-50 opacity-80">
            {battle.allVote
              ? battle.allVote.filter(
                  (vote: { hero: string }) =>
                    vote.hero === battle.Battle.hero_two
                ).length
              : 0}
          </li>
        </ul>
      </Header>
      <main className="relative py-10 md:py-20 overflow-hidden px-4">
        <section>
          <div className="container mx-auto">
            <Title color="text-primary-500 font-bold" title="Battle" />
            <div className="py-16" />
            {session ? (
              <>
                {battle.allVote &&
                battle.allVote.filter(
                  (vote: { user_id: string }) =>
                    vote.user_id === session.user_id
                ).length > 0 ? (
                  <Heading color="text-primary-500" title="You already voted" />
                ) : (
                  <div className="flex flex-row items-center space-x-6">
                    <select
                      ref={selectRef}
                      name="heroes"
                      className="border-2 border-primary-500 p-2 focus:border-primary-500 active:border-primary-500 rounded-md selected:border-primary-500 selection:border-primary-500"
                    >
                      <option value="">Please choose a Hero</option>
                      <option value={battle.Battle.hero_one}>
                        {battle.Battle.hero_one}
                      </option>
                      <option value={battle.Battle.hero_two}>
                        {battle.Battle.hero_two}
                      </option>
                    </select>
                    <PrimaryButton
                      disabled={voteMutation.isLoading}
                      onClick={() => {
                        voteMutation.mutate(
                          {
                            battleId: battle.Battle._id,
                            hero: selectRef.current?.value,
                          },
                          {
                            onSuccess: (data) => {
                              showModalStatus("✔ Success", data.data.message);
                            },
                            onError: (data) => {
                              showModalStatus(
                                "❗ Error",
                                data.response.data.message
                              );
                            },
                          }
                        );
                      }}
                    >
                      Vote
                    </PrimaryButton>
                  </div>
                )}
              </>
            ) : (
              <Heading title="Login to vote" color="text-primary-500" />
            )}
          </div>
        </section>
      </main>
    </>
  );
};

export default Battle;

export const getStaticProps: GetStaticProps = async (context) => {
  const battleId = context.params?.id;

  const { data } = await client.query({
    variables: { battleId: battleId },
    query: getBattle,
  });

  return {
    props: {
      battle: data,
    },
  };
};

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// the path has not been generated.
export const getStaticPaths: GetStaticPaths = async () => {
  const { data } = await client.query({
    variables: { limit: 100000 },
    query: getBattles,
  });

  // Get the paths we want to pre-render based on posts
  const paths = data.allBattle.map((battles: { _id: string }) => ({
    params: { id: battles._id },
  }));

  // We'll pre-render only these paths at build time.
  // { fallback: blocking } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: "blocking" };
};
