import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useScroll, useTransform, motion } from "framer-motion";
import { GetStaticProps, GetStaticPaths } from "next";
import {
  Branding,
  Navbar,
  Header,
  Info,
  Title,
  PrimaryButton,
  Heading,
} from "../../src/components/index";
import { gql } from "@apollo/client";
import { client } from "../../src/lib/index";
import { HeaderContent, Easing } from "../../src/constants/index";
import Link from "next/link";

const Battle: NextPage = ({ battle }) => {
  console.log(battle);
  return (
    <>
      <Head>
        <title>Battle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Header>
        <h1>
          {battle.Battle.hero_one} VS {battle.Battle.hero_two}
        </h1>
        <ul className="flex flex-row items-center space-x-4">
          <li className="text-md md:text-lg font-secondary text-slate-50 opacity-80">
            {battle.Battle.votes
              ? battle.Battle.votes.filter(
                  (vote) => vote.hero === battle.Battle.hero_one
                ).length
              : 0}
          </li>
          <li className="text-xl md:text-2xl font-primary bg-clip-text font-extrabold text-transparent bg-gradient-to-b from-orange-500 to-yellow-500">
            VS
          </li>
          <li className="text-md md:text-lg font-secondary text-slate-50 opacity-80">
            {battle.Battle.votes
              ? battle.Battle.votes.filter(
                  (vote) => vote.hero === battle.Battle.hero_two
                ).length
              : 0}
          </li>
        </ul>
      </Header>
      <main className="relative py-10 md:py-20 overflow-hidden px-4">
        <section>
          <div className="container mx-auto">
            <Title color="text-primary-500 font-bold" title="Battle" />
            <div className="md:py-16 py-8" />
          </div>
        </section>
      </main>
    </>
  );
};

export default Battle;

export const getStaticProps: GetStaticProps = async (context) => {
  const battleId = context.params.id;

  const { data } = await client.query({
    query: gql`
      query Battles {
        Battle(id:"${battleId}") {
          _id
          hero_one
          hero_one_img {
            asset {
              url
            }
          }
          hero_two
          hero_two_img {
            asset {
              url
            }
          }
          votes {
            _id
            hero
          }
          opinions {
            _id
            textRaw
          }
        }
      }
    `,
  });

  return {
    props: {
      battle: data,
    },
  };
};

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// the path has not been generated.
export const getStaticPaths: GetStaticPaths = async () => {
  const { data } = await client.query({
    query: gql`
      query Battles {
        allBattle {
          _id
          hero_one
          hero_one_img {
            asset {
              url
            }
          }
          hero_two
          hero_two_img {
            asset {
              url
            }
          }
          votes {
            _id
            hero
          }
          opinions {
            _id
            textRaw
          }
        }
      }
    `,
  });

  // Get the paths we want to pre-render based on posts
  const paths = data.allBattle.map((battles) => ({
    params: { id: battles._id },
  }));

  // We'll pre-render only these paths at build time.
  // { fallback: blocking } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: "blocking" };
};
