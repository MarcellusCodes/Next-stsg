import { useScroll, useTransform, motion } from "framer-motion";
import type { NextPage } from "next";
import { GetStaticProps, GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import {
  Branding,
  Navbar,
  Header,
  Info,
  Title,
  PrimaryButton,
  Heading,
  Battle,
} from "../src/components/index";
import { gql } from "@apollo/client";
import { client } from "../src/lib/index";
import { HeaderContent, Easing } from "../src/constants/index";
import Link from "next/link";
import { getVotes } from "../src/queries/index";
import { getSession } from "next-auth/react";

interface BattleProps {
  votes: {
    allBattle: {
      _id: string;
      hero_one: string;
      hero_one_img: {
        asset: {
          url: string;
          __typename: string;
        };
        __typename: string;
      };
      hero_two: string;
      hero_two_img: {
        asset: {
          url: string;
          __typename: string;
        };
        __typename: string;
      };
    }[];
    allVote: {
      _id: string;
      hero: string;
      user_id: string;
      battle: {
        _id: string;
      };
    }[];
  };
}

const Dashboard: NextPage<BattleProps> = ({ votes }) => {
  const preparedFilterVotes = votes.allVote.map(({ battle: { _id } }) => ({
    _id,
  }));

  const filteredBattles = votes.allBattle.filter((battle) => {
    const battles = preparedFilterVotes.some((vote) => vote._id === battle._id);
    return battles;
  });

  return (
    <>
      <Head>
        <title>Superhero Votes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar>
        <Link href="/battles" passHref>
          <li className="bg-primary-500 hover:bg-primary-300 active:bg-primary-700 text-slate-50 px-6 py-2 text-xl font-primary rounded-md cursor-pointer">
            <a className="flex flex-row items-center space-x-1">
              <svg
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                className="w-[24px] h-[24px] fill-current text-slate-50"
              >
                <path d="M23.414.587a2.022 2.022 0 0 0-1.941-.513 16.461 16.461 0 0 0-6.479 3.983l-9.476 9.475a14.58 14.58 0 0 0-4.376-1.522 1 1 0 0 0-.286 1.979 12.632 12.632 0 0 1 5.353 2.387L2.5 20.086l-.793-.793a1 1 0 1 0-1.414 1.414l3 3a1 1 0 1 0 1.414-1.414l-.793-.793 3.709-3.71a12.609 12.609 0 0 1 2.387 5.354A1 1 0 0 0 11 24a.881.881 0 0 0 .144-.011 1 1 0 0 0 .847-1.13 14.515 14.515 0 0 0-1.522-4.376l9.475-9.476a16.52 16.52 0 0 0 4.01-6.574 1.994 1.994 0 0 0-.54-1.846zm-4.885 7.005L9.362 16.76a11.15 11.15 0 0 0-.988-1.134 11.36 11.36 0 0 0-1.133-.988l9.167-9.167a14.384 14.384 0 0 1 5.584-3.464 14.453 14.453 0 0 1-3.463 5.585z" />
              </svg>
              <span>All Battles</span>
            </a>
          </li>
        </Link>
      </Navbar>
      <Header title="Superheroes Battle">
        <ul>
          {HeaderContent.map((content) => (
            <Info key={content.id} info={content} />
          ))}
        </ul>
      </Header>
      <main id="votes" className="relative py-10 md:py-20 overflow-hidden px-4">
        <section>
          <div className="container mx-auto">
            <Title color="text-primary-500 font-bold" title="Your Votes" />
            <div className="py-16" />
            <Heading
              color="text-primary-500"
              title={`You participated in ${filteredBattles.length} battles.`}
            />
            <div className="py-16" />
            <div className="flex flex-col items-center space-y-32 w-full">
              {filteredBattles.map((battle, index) => (
                <Battle
                  key={battle._id}
                  battle={battle}
                  votes={votes.allVote}
                  index={index}
                />
              ))}
              {votes.allBattle.filter((battle) => battle.user_id)}
            </div>
          </div>
        </section>
      </main>
    </>
  );
};

export default Dashboard;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { req } = context;
  const session = await getSession({ req: req });

  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: "/login",
      },
    };
  }

  const { data } = await client.query({
    variables: { userId: session.user_id },
    query: getVotes,
  });

  return {
    props: {
      votes: data,
    },
  };
};
