import { useScroll, useTransform, motion } from "framer-motion";
import type { NextPage } from "next";
import { GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import {
  Branding,
  Navbar,
  Header,
  Info,
  Title,
  PrimaryButton,
  Heading,
} from "../src/components/index";
import { gql } from "@apollo/client";
import { client } from "../src/lib/index";
import { HeaderContent, Easing } from "../src/constants/index";
import Link from "next/link";

interface BattleProps {
  battles: {
    allBattle: {
      _id: string;
      hero_one: string;
      hero_one_img: {
        asset: {
          url: string;
          __typename: string;
        };
        __typename: string;
      };
      hero_two: string;
      hero_two_img: {
        asset: {
          url: string;
          __typename: string;
        };
        __typename: string;
      };
      votes: {
        _id: string;
        hero: string;
      }[];
    }[];
  };
}

const Home: NextPage<BattleProps> = ({ battles }) => {
  return (
    <>
      <Head>
        <title>Superhero Battle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Header>
        <ul>
          {HeaderContent.map((content) => (
            <Info key={content.id} info={content} />
          ))}
        </ul>
      </Header>
      <main className="relative py-10 md:py-20 overflow-hidden px-4">
        <div className="container mx-auto">
          <Title color="text-primary-500 font-bold" title="Battles" />
          <div className="md:py-16 py-8" />
          <div className="flex flex-col items-center space-y-32 w-full">
            {battles.allBattle.map((battle, index) => (
              <motion.article
                initial={{
                  opacity: 0,
                  x: index % 2 === 0 ? -200 : 200,
                }}
                whileInView={{
                  opacity: 1,
                  x: 0,
                }}
                viewport={{ once: true, margin: "0px 0px -200px 0px" }}
                transition={{ duration: 1, ...Easing }}
                key={battle._id}
                className="max-w-[960px] w-full bg-gradient-to-r from-primary-500 to-secondary-500 relative pt-14 px-4 pb-4 sm:p-4 rounded-md shadow-lg mx-auto overflow-y-visible"
              >
                <motion.div className="absolute top-0 sm:top-1/2 left-[5%] md:left-[10%] -translate-y-1/2 w-[100px] h-[100px] sm:w-[150px!important] sm:h-[300px!important] rounded-md overflow-hidden">
                  <Image
                    src={battle.hero_one_img.asset.url}
                    alt="Header Image Batman"
                    layout="fill"
                    objectFit="cover"
                  />
                </motion.div>
                <motion.div className="absolute top-0 sm:top-1/2  right-[5%] md:right-[10%] -translate-y-1/2 w-[100px] h-[100px] sm:w-[150px!important] sm:h-[300px!important] rounded-md overflow-hidden">
                  <Image
                    src={battle.hero_two_img.asset.url}
                    alt="Header Image Batman"
                    layout="fill"
                    objectFit="cover"
                  />
                </motion.div>
                <div className="flex flex-col items-center space-y-3">
                  <Heading
                    title={`${battle.hero_one} vs ${battle.hero_two}`}
                    color="text-slate-50"
                  />
                  <p className="text-xl md:text-2xl text-slate-50 opacity-85 font-secondary">
                    Votes
                  </p>
                  <ul className="flex flex-row items-center space-x-4">
                    <li className="text-md md:text-lg font-secondary text-slate-50 opacity-80">
                      {battle.votes
                        ? battle.votes.filter(
                            (vote) => vote.hero === battle.hero_one
                          ).length
                        : 0}
                    </li>
                    <li className="text-xl md:text-2xl font-primary bg-clip-text font-extrabold text-transparent bg-gradient-to-b from-orange-500 to-yellow-500">
                      VS
                    </li>
                    <li className="text-md md:text-lg font-secondary text-slate-50 opacity-80">
                      {battle.votes
                        ? battle.votes.filter(
                            (vote) => vote.hero === battle.hero_two
                          ).length
                        : 0}
                    </li>
                  </ul>
                  <div className="pt-1" />
                  <Link href={`/battle/${battle._id}`} passHref>
                    <motion.a className="bg-slate-900 hover:bg-slate-700 active:bg-slate-800 text-slate-50 px-6 py-2 text-xl font-primary rounded-md">
                      Join Battle
                    </motion.a>
                  </Link>
                </div>
              </motion.article>
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
  const { data } = await client.query({
    query: gql`
      query Battles {
        allBattle {
          _id
          hero_one
          hero_one_img {
            asset {
              url
            }
          }
          hero_two
          hero_two_img {
            asset {
              url
            }
          }
          votes {
            _id
            hero
          }
        }
      }
    `,
  });

  return {
    props: {
      battles: data,
    },
    revalidate: 60,
  };
};
